#!/bin/zsh

vared -p 'Install zsh files? [y/n]: ' -c isZsh
echo

if [[ $isZsh == 'y' ]]; then
  setopt EXTENDED_GLOB

  backup_dir=${HOME}/zsh-backup-$(date +%s)

  for rcfile in "${ZDOTDIR:-$HOME}"/.bzsh/runcoms/^README.md; do
    if [[ -s $HOME/.${rcfile:t} ]]; then
      echo "${rcfile:t} already exists. Moving existing file to backup directory: ${backup_dir}..."
      if ! [[ -s ${backup_dir:t} ]]; then
        mkdir $backup_dir
      fi
      mv $HOME/.${rcfile:t} $backup_dir
    fi

    ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
    echo "${rcfile:t} successfully linked"
  done
fi


# Apple ARM specifics
if [[ $(uname -p) == 'arm' ]]; then
  echo 'Installing rosetta for compatability...'
  sudo softwareupdate --install-rosetta --agree-to-license
  
  brew_prefix=/opt/homebrew
else
  brew_prefix=/usr/local
fi

vared -p 'Install necassary apps? [y/n]: ' -c isNecassary
echo

if [[ $isNecassary == 'y' ]]; then
  echo 'Installing necassary packages...'

  echo 'Installing homebrew...'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$($brew_prefix/bin/brew shellenv)"

  brew update

  brew tap homebrew/cask
  brew tap homebrew/cask-versions
  brew tap homebrew/cask-fonts
  brew tap chrokh/tap

  brew install \
    asdf \
    autojump \
    bat \
    coreutils \
    curl \
    direnv \
    font-sauce-code-pro-nerd-font \
    fzf \
    gawk \
    git \
    gnupg \
    gnutls \
    htop \
    iterm2 \
    neovim \
    pinentry-mac \
    python \
    ripgrep \
    shellcheck \
    subversion \
    tree \
    zinit \
    zsh \
    zsh-completions

  brew install --cask \
    docker

  # install fzf completions
  $(brew --prefix)/opt/fzf/install

  echo 'Checking for issues...'
  brew doctor

  echo 'Configuring related utils...'

  echo 'Starting docker...'
  open /Applications/Docker.app

  echo 'Installing node...'
  # Install node version manager
  asdf plugin add nodejs
  # Default to system
  asdf global nodejs system
  # Enable yarn
  corepack enable

  echo 'Installing java...'
  # Install java version manager
  asdf plugin-add java
  # Default to system
  asdf global java system

  echo 'Installing maven...'
  # Install maven version manager
  asdf plugin-add maven
  # Install the default version of maven
  asdf install maven latest
  asdf global maven latest

  echo 'Installing python...'
  # Install python version manager
  asdf plugin-add python
  # Install the default version of python
  asdf install python latest
  asdf global python latest
  # Upgrade pip
  pip3 install --upgrade pip

  echo 'Installing rust...'
  # Install rust version manager
  asdf plugin-add rust
  # Install the default version of rust
  asdf install rust latest
  asdf global rust latest

  echo 'Installing scala...'
  # Install scala version manager
  asdf plugin-add scala
  # Install the default version of scala
  asdf install scala latest
  asdf global scala latest

  echo 'Configuring gpg...'
  echo "pinentry-program $(brew --prefix)/bin/pinentry-mac" >>~/.gnupg/gpg-agent.conf
fi

echo 'Creating ~/.zshprivate for private env variables...'
touch ~/.zshprivate

echo 'Loading runcoms...'
for rcfile in "${ZDOTDIR:-$HOME}"/.bzsh/runcoms/^README.md; do
    if [[ -s $HOME/.${rcfile:t} ]]; then
      source $HOME/.${rcfile:t}
    fi
  done

vared -p 'Configure ssh? [y/n]: ' -c isSSH
echo

if [[ $isSSH == 'y' ]]; then
  ssh-keygen -t ed25519
  eval "$(ssh-agent -s)"
  echo "Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/id_ed25519" >>~/.ssh/config
fi

vared -p 'Configure gpg? [y/n]: ' -c isGPG
echo

if [[ $isGPG == 'y' ]]; then
  vared -p 'Create new gpg? [y/n]: ' -c isNewGPG
  echo

  if [[ $isNewGPG == 'y' ]]; then
    echo 'Generating gpg key...'
    $brew_prefix/bin/gpg --full-generate-key

    signkey=$(gpg --list-secret-keys --keyid-format long | rg -Po 'sec.+\/\K(\S+)')
    $brew_prefix/bin/gpg --export-secret-keys $signkey >~/gpg-bu.asc
    echo 'gpg private saved to home. Back this up somewhere secure!'
    read -s -k '?Press any key to continue...'
    
    $brew_prefix/bin/gpg --armor --export $signkey | pbcopy
    echo 'gpg public key has been copied to clipboard. Save this!'
    read -s -k '?Press any key to continue...'
  fi

  vared -p 'Import gpg? [y/n]: ' -c isImportGPG
  echo

  if [[ $isImportGPG == 'y' ]]; then
    echo 'Enter your gpg key file with path:'
    read gpg_file

    $brew_prefix/bin/gpg --import $gpg_file

    signkey=$($brew_prefix/bin/gpg --list-secret-keys --keyid-format long | $brew_prefix/bin/rg -Po 'sec.+\/\K(\S+)')
  fi
fi

vared -p 'Configure git? [y/n]: ' -c isGit
echo

if [[ $isGit == 'y' ]]; then
  echo 'Enter your full name:'
  read name

  echo 'Enter your email:'
  read email

  # If signkey isn't saved from gpg generation
  if [[ -z $signkey ]]; then
    echo 'Enter your gpg signkey:'
    read signkey
  fi

  git config --global user.name $name
  git config --global user.email $email
  git config --global core.editor nvim
  git config --global init.defaultBranch main
  git config --global commit.gpgsign true
  git config --global gpg.program $(brew --prefix)/bin/gpg
  git config --global user.signkey $signkey

  echo '============================'
  echo 'Here is your git config:'
  git config --list
fi

vared -p 'Install recommended developer apps? [y/n]: ' -c isRecommendedDev
echo

if [[ $isRecommendedDev == 'y' ]]; then
  echo 'Installing recommended brew developer apps...'
  brew update

  brew tap homebrew/cask-drivers

  brew install \
    1password \
    1password-cli \
    aha \
    awscli \
    brotli \
    cmake \
    docker-slim \
    figma \
    firefox \
    firefox-developer-edition \
    gifox \
    google-chrome \
    helm \
    htop \
    imagemagick \
    imageoptim-cli \
    iterm2 \
    jq \
    kubectx \
    microsoft-edge \
    pigz \
    pipenv \
    postman \
    quicklook-csv \
    quicklook-json \
    rustup-init \
    sequel-pro \
    slack \
    svgo \
    the-unarchiver \
    tldr \
    vagrant \
    visual-studio-code \
    watch \
    watchman \
    wget

  brew install --cask \
    rectangle

  echo 'Checking for issues...'
  brew doctor

  echo 'Configuring related utils...'

  echo 'Installing iterm utils...'
  # iterm shell integration
  curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | zsh
fi

vared -p 'Install personal apps? [y/n]: ' -c isPersonal
echo

if [[ $isPersonal == 'y' ]]; then
  echo 'Installing personal brew apps...'
  brew update

  brew tap homebrew/cask-drivers

  brew install \
    discord \
    epic-games \
    mas \
    steam \
    transmission-cli

  brew install --cask \
    adobe-creative-cloud \
    cinebench \
    monitorcontrol \
    mouse-fix \
    obsidian \
    transmission \
    vlc \
    zoom

  echo 'Checking for issues...'
  brew doctor

  echo 'Installing personal App Store apps...'
  mas lucky amphetamine
  mas lucky keynote
  mas lucky nordvpn
  mas lucky numbers
  mas lucky pages
fi

vared -p 'Enable key repetition? [y/n]: ' -c isRep
echo

if [[ $isRep == 'y' ]]; then
  defaults write -g ApplePressAndHoldEnabled -bool false
fi

vared -p 'Setup zsh shell? [y/n]: ' -c isConfig
echo

if [[ $isConfig == 'y' ]]; then
  echo 'Setting zsh as default user shell...'
  sudo zsh -c "echo $(brew --prefix)/Cellar/zsh >> /etc/shells"
  chsh -s $(brew --prefix)/Cellar/zsh
fi

echo 'Finished! Please restart now!'
